{"body":"### System requirements for OSX\r\nios-driver is based on the UIAutomation framework from Apple.[doc](http://developer.apple.com/library/ios/#documentation/DeveloperTools/Reference/UIAutomationRef/_index.html)\r\nYou need xcode with an IOS SDK > 5.0.\r\nTo check :\r\n```\r\n$  xcodebuild -showsdks\r\n```\r\n\r\nit should return something like :\r\n\r\n```\r\nMac OS X SDKs:\r\n\tMac OS X 10.6                 \t-sdk macosx10.6\r\n\tMac OS X 10.7                 \t-sdk macosx10.7\r\n\r\niOS SDKs:\r\n\tiOS 5.1                       \t-sdk iphoneos5.1\r\n\r\niOS Simulator SDKs:\r\n\tSimulator - iOS 4.3           \t-sdk iphonesimulator4.3\r\n\tSimulator - iOS 5.0           \t-sdk iphonesimulator5.0\r\n\tSimulator - iOS 5.1           \t-sdk iphonesimulator5.1\r\n```\r\n\r\nIf you have iOS 5.0 or above in the Simulator SDKs, UIAutomation will work with ios-driver.\r\n\r\n\r\nThe sever is written in Java.\r\n```\r\n$  java -version\r\n```\r\nwill return the version you're currently running, or prompt you to install it.\r\n\r\n\r\n\r\n### Getting the application to test\r\n( for the doc example, I'll use the apple app [InternationalMountains](http://developer.apple.com/library/ios/#samplecode/InternationalMountains/Introduction/Intro.html)\r\nYou need to attach an app that will work with UIAutomation.\r\nYou can use xcodebuild command line ( from you CI for instance ) or use the xcode UI.\r\n\r\nWith the UI : \r\nfrom the menu bar, Product > Profile\r\n\r\nSelect Automation.That will build the app and start Instruments. you can close Instruments.\r\nFrom xcode, select Organizer > Projects\r\nYou will have the application in the folder mentioned in Derived data. \r\nIt will be a folder that looks like :\r\n~/Library/Developer/Xcode/DerivedData/InternationalMountains-cjnsqcubuvgivjgopgboswocznce/\r\n\r\nfrom there navigate to /Build/Products/Debug-iphonesimulator\r\nand take you application. ( YourAppName.app )\r\n\r\nSave it in a more convenient path, for instance ~/Documents/build/myapp.app\r\n\r\n### Launching ios-driver\r\nDownload server-standalone-1.0.0-SNAPSHOT.jar\r\n\r\ncd to the folder where you downloaded the jar, and run \r\n```\r\n$  java -jar server-standalone-1.0.0-SNAPSHOT.jar -aut ~/Documents/build/myapp.app -port 4444\r\n```\r\nYou should see in the following log of the terminal :\r\n```\r\n2012-09-24 20:03:39.724:INFO::jetty-7.x.y-SNAPSHOT\r\n2012-09-24 20:03:39.791:INFO::Started SelectChannelConnector@0.0.0.0:4444\r\n```\r\n\r\ncheck that the application is recognized by opening a browser and navigating to :\r\nhttp://localhost:4444/wd/hub/status\r\n\r\n\r\nYou should see a json object with all the info about the app.\r\n```\r\n{\r\n  \"sessionId\": null,\r\n  \"status\": 0,\r\n  \"value\": {\r\n    \"build\": {\r\n      \"revision\": \"bec94e77cb2c1d95c392cf82267e81e595caff82\",\r\n      \"time\": \"20120924-1640\",\r\n      \"version\": \"1.0.0-SNAPSHOT\"\r\n    },\r\n    \"ios\": {\"simulatorVersion\": \"5.1\"},\r\n    \"java\": {\"version\": \"1.6.0_35\"},\r\n    \"os\": {\r\n      \"arch\": \"x86_64\",\r\n      \"name\": \"Mac OS X\",\r\n      \"version\": \"10.7.4\"\r\n    },\r\n    \"supportedApps\": [{\r\n      \"CFBundleDevelopmentRegion\": \"en\",\r\n      \"CFBundleExecutable\": \"InternationalMountains\",\r\n      \"CFBundleIconFile\": \"Icon.png\",\r\n      \"CFBundleIdentifier\": \"com.yourcompany.InternationalMountains\",\r\n      \"CFBundleInfoDictionaryVersion\": \"6.0\",\r\n      \"CFBundleName\": \"InternationalMountains\",\r\n      \"CFBundlePackageType\": \"APPL\",\r\n      \"CFBundleSignature\": \"????\",\r\n      \"CFBundleSupportedPlatforms\": [\"iPhoneSimulator\"],\r\n      \"CFBundleVersion\": \"1.1\",\r\n      \"DTPlatformName\": \"iphonesimulator\",\r\n      \"DTSDKName\": \"iphonesimulator5.1\",\r\n      \"LSRequiresIPhoneOS\": true,\r\n      \"NSMainNibFile\": \"MainWindow\",\r\n      \"UIDeviceFamily\": [1],\r\n      \"applicationPath\": \"/Users/freynaud/build/InternationalMountains.app\",\r\n      \"device\": \"iPhone Simulator\",\r\n      \"resources\": {\"CFBundleIconFile\": \"/wd/hub/resources/hash=-674408620\"},\r\n      \"sdkVersion\": \"5.1\",\r\n      \"supportedLanguages\": [\r\n        \"zh-Hant\",\r\n        \"fr\",\r\n        \"en\"\r\n      ],\r\n      \"timeHack\": true\r\n    }]\r\n  }\r\n}\r\n```\r\n\r\n### Starting the application using the java client.\r\nusing the intl mountain app with language = Chinese. \r\n\r\nstart, click on the first element, take a screenshot and quit.\r\n\r\n```\r\npublic static void main(String[] args) {\r\n\r\n    IOSCapabilities cap = IOSCapabilities.iphone(\"InternationalMountains\", \"1.1\");\r\n    cap.setLanguage(\"zh-Hant\");\r\n\r\n    RemoteUIADriver driver = new RemoteUIADriver(\"http://localhost:4444/wd/hub\", cap);\r\n\r\n    UIATarget target = driver.getLocalTarget();\r\n    UIAWindow mainWindow = target.getFrontMostApp().getMainWindow();\r\n\r\n    // find the first element of type UIATableCell.\r\n    UIAElement element = mainWindow.findElement(new TypeCriteria(UIATableCell.class));\r\n    element.tap();\r\n    \r\n    target.takeScreenshot(\"step2.png\");\r\n\r\n    driver.quit();\r\n}\r\n```\r\n\r\nyou should now have a screenshot of mountain 1 details :\r\n![step2.png](step2.png)\r\n\r\nIOS automation is very content based. There is no id like for web pages. This makes localized pages a bit trickier to test. \r\nFortunately the localization data is embedded into the app, so the server can access it if you know the key for the content. You can use the IDE embedded in the ios-driver server to access it.\r\nAdd a break point on  target.takeScreenshot(\"step2.png\");\r\n\r\nWhen the application has stopped there, open a browser and got to http://localhost:4444/ide/\r\nYou will see the app with its object tree. \r\n![ide](ide)\r\n\r\n\r\nMouse over the element you're interested in. In this example the description of the mountain, and note the content key for that element :  \"sentenceFormat\".\r\nThe criteria to locate that element will be :\r\n```\r\n NameCriteria criteria =  new NameCriteria(\"sentenceFormat\", L10NStrategy.serverL10N, MatchingStrategy.regex);\r\n```\r\nIn this case, the 3 element attributes, name label and value have the same value. So LabelCriteria or ValueCriteria would work too.\r\nWe need the server to handle the localization :  L10NStrategy.serverL10N\r\nWe need a regex match, because the date and mountain name are variable : MatchingStrategy.regex\r\n\r\nNow add that in the main, and add a sysout to see the content of the element :\r\n\r\n```\r\n  public static void main(String[] args) {\r\n\r\n    IOSCapabilities cap = IOSCapabilities.iphone(\"InternationalMountains\", \"1.1\");\r\n    cap.setLanguage(\"zh-Hant\");\r\n\r\n    RemoteUIADriver driver = new RemoteUIADriver(\"http://localhost:4444/wd/hub\", cap);\r\n\r\n   \r\n    UIATarget target = driver.getLocalTarget();\r\n    UIAWindow mainWindow = target.getFrontMostApp().getMainWindow();\r\n\r\n    // find the first element of type UIATableCell.\r\n    UIAElement element = mainWindow.findElement(new TypeCriteria(UIATableCell.class));\r\n    element.tap();\r\n    \r\n    NameCriteria criteria =\r\n        new NameCriteria(\"sentenceFormat\", L10NStrategy.serverL10N, MatchingStrategy.regex);\r\n    UIAElement text = mainWindow.findElement(criteria);\r\n    System.out.println(text.getName());\r\n    driver.quit();\r\n  }\r\n```\r\n\r\nwill print out :\r\n```\r\n山 1 是8,848米高。它第一次攀登了在29 May 1953。\r\n```\r\n\r\nThe same test will run for all the languages supported by this app, so fr and en, without having to change anything but the value passed in the capability.setLanguage.\r\n\r\n","note":"Don't delete this file! It's used internally to help with page regeneration.","tagline":"IOS native app automation","google":"","name":"ios-driver"}